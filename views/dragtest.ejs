<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />  <meta name="description" content="<%= __("invite") %>" />
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <link rel='stylesheet' href='/stylesheets/main.css' />
    <title><%= __("Title") %></title>
    <script type="text/javascript" src="/javascripts/vendor/requirejs/require.js"></script>
    <script type="text/javascript" src="/javascripts/require-config.js"></script>
    <script type="text/javascript">
        window.onload = function() {
            var dropTargets = document.querySelectorAll('.dd-container');
            var counter = (function() {
                var privateCounter = 0;
                function changeBy(val) {
                    privateCounter += val;
                }
                return {
                    increment: function() {
                        changeBy(1);
                    },
                    decrement: function() {
                        changeBy(-1);
                    },
                    value: function() {
                        return privateCounter;
                    }
                };
            })();
            var buttonDiv = document.createElement("div");
            document.body.appendChild(buttonDiv);
            buttonDiv.innerHTML = "<button class='btn'>Add image to container</button>";
            var button = buttonDiv.querySelector("button");
            button.addEventListener("click", function(){addImage(dropTargets[dropTargets.length-1])}, true);

            function addImage(el){
                var dispInfo=document.createElement("div");
                document.body.appendChild(dispInfo);
                var date=new Date();
                dispInfo.innerHTML = date.toLocaleTimeString();
                counter.increment();
                var image=document.createElement("img");
                image.src="/images/continent.png";
                image.setAttribute("draggable", "true");
                image.className="dd-item";
                image.id = "drag" + counter.value();
                if(el instanceof  Element) {
                    el.appendChild(image);
                } else {
                    dropTargets[0].appendChild(image);
                }
                dispInfo.innerHTML += " image " + image.id + " ADDED to the element &lt" + image.parentNode.tagName.toLowerCase() +  "&gt at x:" + image.getBoundingClientRect().left + " y:"+ image.getBoundingClientRect().top + "";
                image.addEventListener('mousedown', drag, false);
            }

            function drag(event) {
                var dispInfo=document.createElement("div");
                document.body.appendChild(dispInfo);
                var elToDrag=this;
                var mouseDownAt={x: event.clientX, y: event.clientY};
                var orig = elToDrag.getBoundingClientRect();
                var deltaX = event.clientX - orig.left;
                var deltaY = event.clientY - orig.top;
                document.ondragstart = function() { return false };
                document.body.onselectstart = function() { return false };
                document.addEventListener("mousemove", moveHandler, true);
                document.addEventListener("mouseup", upHandler, true);

                var currentDropTarget, dropTargetRectangles=[];
                    function cacheDropTargetRectangles(dropTargets) {
                    for (var i = 0, len=dropTargets.length; i<len; i++){
                        dropTargetRectangles[i]={};
                        dropTargetRectangles[i].item = dropTargets[i];
                        dropTargetRectangles[i].top = dropTargets[i].getBoundingClientRect().top + parseInt(window.getComputedStyle(dropTargets[i],null).getPropertyValue("border-top-width"));
                        dropTargetRectangles[i].right = dropTargets[i].getBoundingClientRect().right - parseInt(window.getComputedStyle(dropTargets[i],null).getPropertyValue("border-right-width"));
                        dropTargetRectangles[i].bottom = dropTargets[i].getBoundingClientRect().bottom - parseInt(window.getComputedStyle(dropTargets[i],null).getPropertyValue("border-bottom-width"));
                        dropTargetRectangles[i].left = dropTargets[i].getBoundingClientRect().left + parseInt(window.getComputedStyle(dropTargets[i],null).getPropertyValue("border-left-width"));
                    }
                }
                cacheDropTargetRectangles(dropTargets);

                function getCurrentTarget(dropTargetRectangles,el) {
                    var dropTarget=null;
                    for (var i = 0, len = dropTargetRectangles.length; i < len; i++) {
                        var targ = dropTargetRectangles[i];
                        if((el.getBoundingClientRect().left > targ.left) &&
                           (el.getBoundingClientRect().right < targ.right) &&
                           (el.getBoundingClientRect().top > targ.top) &&
                           (el.getBoundingClientRect().bottom < targ.bottom)){
                                dropTarget=targ.item;
                        }
                    }
                    return dropTarget;
                }

                event.stopPropagation();
                event.preventDefault();
                elToDrag.style.opacity='0.5';
                var parentLeft = elToDrag.parentNode.getBoundingClientRect().left + parseInt(window.getComputedStyle(elToDrag.parentNode,null).getPropertyValue("border-left-width"));
                var parentTop = elToDrag.parentNode.getBoundingClientRect().top + parseInt(window.getComputedStyle(elToDrag.parentNode,null).getPropertyValue("border-top-width"));
                function moveHandler(e) {
                    if (Math.abs(mouseDownAt.x-e.clientX)<6 && Math.abs(mouseDownAt.y-e.clientY)<6) {
                        return;
                    }
                    elToDrag.style.left = (e.clientX - deltaX - parentLeft) + "px";
                    elToDrag.style.top = (e.clientY - deltaY - parentTop) + "px";
                    var newTarget = getCurrentTarget(dropTargetRectangles,elToDrag);
                    if (currentDropTarget && currentDropTarget !== newTarget) {
                        currentDropTarget.classList.remove("active");
                    }
                    currentDropTarget = newTarget;
                    if (newTarget) {
                        newTarget.classList.add("active");
                    }
                    e.stopPropagation();
                }

                function upHandler(e) {
                    var date=new Date();
                    dispInfo.innerHTML = date.toLocaleTimeString();
                    document.ondragstart = null;
                    document.body.onselectstart = null;
                    document.removeEventListener("mouseup", upHandler, true);
                    document.removeEventListener("mousemove", moveHandler, true);
                    e.stopPropagation();
                    if (currentDropTarget) {
                        currentDropTarget.appendChild(elToDrag);
                        elToDrag.style.left = "" + (e.clientX - elToDrag.parentNode.getBoundingClientRect().left - deltaX - window.getComputedStyle(elToDrag.parentNode,null).getPropertyValue("border-left-width").slice(0,-2)) + "px";
                        elToDrag.style.top = "" + (e.clientY - elToDrag.parentNode.getBoundingClientRect().top - deltaY  - window.getComputedStyle(elToDrag.parentNode,null).getPropertyValue("border-top-width").slice(0,-2)) + "px";
                        currentDropTarget.classList.remove("active")
                        dispInfo.innerHTML += "  image " + elToDrag.id + " DROPPED to acceptor container at x:" + elToDrag.getBoundingClientRect().left + " y:"+ elToDrag.getBoundingClientRect().top + "";
                    }else{
                        elToDrag.style.left = "" + orig.left - elToDrag.parentNode.getBoundingClientRect().left - window.getComputedStyle(elToDrag.parentNode,null).getPropertyValue("border-left-width").slice(0,-2) + "px";
                        elToDrag.style.top = "" + orig.top - elToDrag.parentNode.getBoundingClientRect().top  - window.getComputedStyle(elToDrag.parentNode,null).getPropertyValue("border-top-width").slice(0,-2) + "px";
                        dispInfo.innerHTML += (currentDropTarget===undefined) ? "  image " + elToDrag.id +" CLICKED at x:" + e.clientX + " y:"+ e.clientY + "" : "  image " + elToDrag.id +" drop FAILED at x:" + elToDrag.getBoundingClientRect().left + " y:"+ elToDrag.getBoundingClientRect().top + "";
                    }
                    elToDrag.style.opacity='1';
                    (function(){elToDrag=null;}());
                }
            }

        };
    </script>
</head>
<body class="dd-main">
<h1>Drag & Drop image inside or between containers</h1>
<div class="dd-container"></div>
<div class="dd-container"></div>
<div class="dd-container"></div>
<div class="dd-container"></div>

</body>
</html>